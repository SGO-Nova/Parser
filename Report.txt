Blake McLaughlin, Ryan Browning
Group 34
Report

1)    Data Structures:
    Linked-Lists: We used the linked lists to operate as tokens in order to set up the necessary tokens to represent the context-free-grammer used by the parser.

    Multi-child Tree: This tree will be used primarily in the Tree_Process & Create_Token functions where we create and functionalize the tokenizer tree. 

    Arrays: Required in order to store the contents from the txt file.

    Queue: The queue is used in order to temporarily store the recorded data from the tokenizer tree until they are ready to be printed out.

 2)    Functions:
     Tokenizer(int state, char character, char token [])
     Main Function: 
     Data: int argc, char argv[]
     Purpose: The purpose of the main function is to take the txt file that needs to be read and send it through the token tree, starting the token push.
     Expected Output: 

     Function 1 Parse Error - 
     Data:
     Purpose: The parse error function will need to come into play when there's an error in the parsing section of the program.
     Expected Output: Proof of Parsing error if such test file has an error in it.

     Function 2 recursionXML - 
     Data: int state
     Purpose: The recursion function is going to be built to make nine different cases built to give the tokens names depending on the order that they go into the token tree.
     Expected Output: 

     Function 3 Scan - 
     Data: char *file
     Purpose: The scan function is built to open and read the .txt test file and push the contents onto the Interpreter function.
     Expected Output: To be able to scan .txt test file in order to push into DFA tree, then into Parser.

     Function 4 Interpreter - 
     Data: char character[], char next
     Purpose: The interpreter function is required in order to take the individual nodes and set individual signs throughout the tokenizer tree which will also attribute the values across the tree.
     Expected Output: To be able to use interpret the character's used pushed through this function in order to tell values of the tokens.

     Function 5 Tree_Create - 
     Data: int state, char character[10], int terminator
     Purpose: The purpose of this function is to build a token tree that will pass tokens based off the .txt reading file in order to build the expected output.
     Expected Output: 

     Function 6 Tree_Process - 
     Data: 
     Purpose: The tree process function will help formulate the flow between node to node in the tokenizer tree, it is required in order to tell the program which node comes next in the tree.
     Expected Output: 

     Function 7_Create_Token -     
     Data: char token_type[10]
     Purpose: The purpose of this function will be to create the actual tokens that will go through the token tree, and end up representing the parser's finalized output.
     Expected Output: 

     Function 8_Push - 
     Data: char id[99]
     Purpose: The push and pop function will be designated to act as a queue for the tokens in their final stage before being outputted as a parser.
     Expected Output: To have a place to put the token's after they go through the tokenizer tree, which has a storage to act like a queue.

     Function 9_pop:
     Data:
     Purpose: The pop function will simply need to be able to output each in the required order to formulate the parser from the queue.
     Expected Output: To have a function to pop the tokens out of the push queue and place them into the parser's expected order.
     
  %%%%Psuedocode%%%% :
  
  Start of the .cpp file{
  Base parser off of the Scanner.cpp
  Use the scanner program for the following:
  Scan         (To read and scan the test.txt file)
  Interpreter  (To attach values based on the tokens pushed through the DFA tree)
  Tree_Create  (To make the skeleton of the DFA tree)
  Tree_Process (To create the flow of the tree)
  Create_Token (To create the tokens)
  
  Create new functions:
  recursionXML (To assign 
  push         (To act as the motion going into a queue)
  pop          (To take from the queue)
  
  Will need push and pop function to make a queue to store the values in after the recursion function.
  
  recursionXML{
  char *temp;
  switch (){
  Case 0:
  temp var is <program>
  Make <program> as the first state for recursion
  x = recursionXML()
  if(x == 0 && current_saved == NULL)
  else{ 
  insert error
  }
  Case 1:
  temp var == stmt_list
  state = 2
  x = recursionXML()
  if(x == 0){
       state = 1
       x = recursionXML()
       temp var == /stmt_list
  }
  else{
       pop it out of the queue
      }
 break this case
 Case 2:
  temp var is <stmt>
  if(current_saved != NULL && current_saved -> token[0] == "a"){
    temp = "<assign>"
    push(temp) and push(current_saved->id);
    temp = "</assign>"
    current_saved = current_saved->next
    state = 3
    set temporary var to </stmt>
    }
    else{
    insert parse error message
    }
   }
   else if(current_saved != NULL && current_saved -> token[1]){
    temp variable == <read>
    push temp var and current_saved -> id
    temp var == </read>
    push temp var
    current_saved = current_saved -> next;
    temp var is </stmt>, push temp
    }
    else{
    if anything else, return error
    }}
    else if(current_saved != NULL && current_saved -> token[0]){
    temp var is <write>, push temp 
    push current -> id
    temp var is </write>, push temp
    temp var is </stmt>, push temp
    }
    else{
        pop()
        }
    break this case
    Case 3:
        temp var is <expr>, push temp
        state is at 5
        x is recursionXML()
        if(x == 0){
            state is at 4
            x is recursionXML()
            }
            else{
            pop()
            }
       break this case
   Case 4:
        temp var is <term_tail>, push temp
        The state is at 8
        x = recursionXML()
        if(x == 0){
            The state is at 5
            x is recursionXML()
            if(x == 0){
                state is at 4
                x is recursionXML(), so return x
                }
            else{
            pop out and return 1
            }}
         else{
                pop();
                temp is </term_tail>, push temp
                }
         break this case
    Case 5:
            temp is <term>, push temp
            state is at 7
            x = recursionXML()
            if(x ==0){
                state is at 6
                x = recursionXML()
                temp var is </term>, push temp
                }
            else{
            pop();
            }
         break this case
     Case 6:
            temp is <fact_tail>, push temp
            the state is now at 9
            x = recursionXML()
            if(x == 0){
                the state is now at 7
                x = recursionXML()
                if(x == 0){
                    the state is now at 6
                    x = recursionXML()
                    temp var is </fact_tail>, push temp
                    }
                    else{
                        pop()
                    }
               }
               else{
               pop()
               temp var is </fact_tail>, push temp
               }
           break this case
       Case 7:
            temp is <factor>, push temp 
            if(current_saved != NULL && current_saved -> token[0]){
                temp var = <lparen>, push temp
                temp var = </lparen>, push temp
                current_saved = current_saved goes to next
                the state goes to 3
                x = recursionXML()
                if(x = 0 && current_saved != NULL && current_saved -> token[0])
                        temp var = <rparen>, push temp
                        temp var = </rparen>, push temp
                        temp var = </factor>, push temp
                        }
                else{
                        pop()
                        }
                 }
               else if(current_saved != NULL && current_saved -> token[0]){
                    temp var = <number>, push temp
                    temp var = </number>, push temp
                    temp var = </factor>, push temp
                    }
                    else{
                        pop()
                        }
                   break this case
                        
         Case 8:
                temp var = <add_op>, push temp
                if(current_saved != NULL && current_saved ->token[0]){
                        temp var = <plus>, push temp
                        temp var = </plus>, push temp
                        current_saved = current_saved goes to next
                        temp var = </add_op>, push temp
                        }
                else if(current_saved != NULL && current_saved -> token[0])
                        temp var = <minus>, push temp
                        temp var = </minus>, push temp
                        current_saved = current_saved goes to next
                        temp var = </add_op>, push temp
                        }
                else{
                        pop()
                        }
                   break this case
          Case 9:
                temp var = <mult_op>, push temp
                if(current_saved != NULL && curren_saved -> token[0])
                    temp var = <div>, push temp
                    temp var = <times>, push temp
                    temp var = </times>, push temp
                    current_saved = current_saved goes to next
                    temp var = </mult_op>, push temp
                    }
                else if (current_saved != NULL && current_saved -> token[0]){
                        temp var = <div>, push temp
                        temp var = </div>, push temp
                        current_saved = current_saved goes to next
                        temp var = </mult_op>, push temp
                        }
                else{
                pop()
                }
          break this case 
                     
 }
 
 push()
    create a function that acts as a unit that pushes tokens from the recursionXML func into a queue
    if(front == NULL){
        front is equal to temp1
        }
        else{
        back goes to next = temp1
        temp1 goes to the next node which equals NULL
        }
  
 pop()
    the pop function simply takes tokens out of the queue
    the push will be needed to be used first in order for pop to function
        
  
  

  3)   Test files:
  I)
     // This test text should give out: (read, id, id, assign, number, div, id, write, id)
     x := 5
  II)  
     //This coude should give out: (lparen, id, assign, number, rparen, id, assign, number, minus, id, times, lparen, number,       div, number, rparen)
     read A
  III)
     //This code should give out: PARSE ERROR
     x = 5
  IV)
     //This code should give out: (number, plus, number)
     3+4.2
  V)
     /*

     Test multiple lines comments

     */
     read x
     write y

  4)   Acknoledgement: N/A
  
  
  
